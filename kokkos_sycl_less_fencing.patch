diff --git a/bin/nvcc_wrapper b/bin/nvcc_wrapper
index b717908bd..a6700c728 100755
--- a/bin/nvcc_wrapper
+++ b/bin/nvcc_wrapper
@@ -625,7 +625,7 @@ if [ $host_only -eq 1 ]; then
   if [ "$NVCC_WRAPPER_SHOW_COMMANDS_BEING_RUN" == "1" ] ; then
     echo "$host_command"
   fi
-  $host_command
+  eval $host_command
 elif [ -n "$nvcc_depfile_command" ]; then
   if [ "$NVCC_WRAPPER_SHOW_COMMANDS_BEING_RUN" == "1" ] ; then
     echo "TMPDIR=${temp_dir} $nvcc_command && TMPDIR=${temp_dir} $nvcc_depfile_command"
@@ -635,7 +635,7 @@ else
   if [ "$NVCC_WRAPPER_SHOW_COMMANDS_BEING_RUN" == "1" ] ; then
     echo "TMPDIR=${temp_dir} $nvcc_command"
   fi
-  TMPDIR=${temp_dir} $nvcc_command
+  TMPDIR=${temp_dir} eval $nvcc_command
 fi
 error_code=$?
 
diff --git a/core/src/SYCL/Kokkos_SYCL_DeepCopy.hpp b/core/src/SYCL/Kokkos_SYCL_DeepCopy.hpp
index 62b7977fc..fbdeca2ff 100644
--- a/core/src/SYCL/Kokkos_SYCL_DeepCopy.hpp
+++ b/core/src/SYCL/Kokkos_SYCL_DeepCopy.hpp
@@ -35,8 +35,10 @@ struct ZeroMemset<Kokkos::Experimental::SYCL, DT, DP...> {
     auto event = exec_space.impl_internal_space_instance()->m_queue->memset(
         dst.data(), 0,
         dst.size() * sizeof(typename View<DT, DP...>::value_type));
-    exec_space.impl_internal_space_instance()
-        ->m_queue->ext_oneapi_submit_barrier(std::vector<sycl::event>{event});
+    if (!(exec_space.impl_internal_space_instance()->m_queue->is_in_order())) {
+      exec_space.impl_internal_space_instance()
+          ->m_queue->ext_oneapi_submit_barrier(std::vector<sycl::event>{event});
+    }
   }
 
   ZeroMemset(const View<DT, DP...>& dst,
diff --git a/core/src/SYCL/Kokkos_SYCL_Parallel_Range.hpp b/core/src/SYCL/Kokkos_SYCL_Parallel_Range.hpp
index 73475f92a..d9bd593ef 100644
--- a/core/src/SYCL/Kokkos_SYCL_Parallel_Range.hpp
+++ b/core/src/SYCL/Kokkos_SYCL_Parallel_Range.hpp
@@ -106,7 +106,8 @@ class Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>,
                                                                          f);
       }
     });
-    q.ext_oneapi_submit_barrier(std::vector<sycl::event>{parallel_for_event});
+    if (!q.is_in_order())
+      q.ext_oneapi_submit_barrier(std::vector<sycl::event>{parallel_for_event});
 
     return parallel_for_event;
   }
@@ -265,7 +266,8 @@ class Kokkos::Impl::ParallelFor<FunctorType, Kokkos::MDRangePolicy<Traits...>,
             .exec_range();
       });
     });
-    q.ext_oneapi_submit_barrier(std::vector<sycl::event>{parallel_for_event});
+    if (!q.is_in_order())
+      q.ext_oneapi_submit_barrier(std::vector<sycl::event>{parallel_for_event});
 
     return parallel_for_event;
   }
diff --git a/core/src/SYCL/Kokkos_SYCL_Parallel_Reduce.hpp b/core/src/SYCL/Kokkos_SYCL_Parallel_Reduce.hpp
index c7959c1c1..05b08889f 100644
--- a/core/src/SYCL/Kokkos_SYCL_Parallel_Reduce.hpp
+++ b/core/src/SYCL/Kokkos_SYCL_Parallel_Reduce.hpp
@@ -279,8 +279,10 @@ class ParallelReduce<FunctorType, Kokkos::RangePolicy<Traits...>, ReducerType,
                                results_ptr.get());
         });
       });
-      q.ext_oneapi_submit_barrier(
-          std::vector<sycl::event>{parallel_reduce_event});
+      if (!q.is_in_order()) {
+        q.ext_oneapi_submit_barrier(
+            std::vector<sycl::event>{parallel_reduce_event});
+      }
       last_reduction_event = parallel_reduce_event;
     }
 
@@ -467,8 +469,10 @@ class ParallelReduce<FunctorType, Kokkos::RangePolicy<Traits...>, ReducerType,
             reduction_lambda);
       });
 
-      last_reduction_event = q.ext_oneapi_submit_barrier(
-          std::vector<sycl::event>{parallel_reduce_event});
+      if (!q.is_in_order()) {
+        last_reduction_event = q.ext_oneapi_submit_barrier(
+            std::vector<sycl::event>{parallel_reduce_event});
+      }
     }
 
     // At this point, the reduced value is written to the entry in results_ptr
@@ -653,8 +657,10 @@ class ParallelReduce<FunctorType, Kokkos::MDRangePolicy<Traits...>, ReducerType,
                                results_ptr.get());
         });
       });
-      q.ext_oneapi_submit_barrier(
-          std::vector<sycl::event>{parallel_reduce_event});
+      if (!q.is_in_order()) {
+        q.ext_oneapi_submit_barrier(
+            std::vector<sycl::event>{parallel_reduce_event});
+      }
       last_reduction_event = parallel_reduce_event;
     }
 
@@ -790,8 +796,10 @@ class ParallelReduce<FunctorType, Kokkos::MDRangePolicy<Traits...>, ReducerType,
           }
         });
       });
-      last_reduction_event       = q.ext_oneapi_submit_barrier(
-          std::vector<sycl::event>{parallel_reduce_event});
+      if (!q.is_in_order()) {
+        last_reduction_event       = q.ext_oneapi_submit_barrier(
+            std::vector<sycl::event>{parallel_reduce_event});
+      }
     }
 
     // At this point, the reduced value is written to the entry in results_ptr
diff --git a/core/src/SYCL/Kokkos_SYCL_Parallel_Scan.hpp b/core/src/SYCL/Kokkos_SYCL_Parallel_Scan.hpp
index cf651ced9..7eba7687a 100644
--- a/core/src/SYCL/Kokkos_SYCL_Parallel_Scan.hpp
+++ b/core/src/SYCL/Kokkos_SYCL_Parallel_Scan.hpp
@@ -169,7 +169,9 @@ class ParallelScanSYCLBase {
             if (global_id < size) global_mem[global_id] = local_value;
           });
     });
-    q.ext_oneapi_submit_barrier(std::vector<sycl::event>{local_scans});
+    if (!q.is_in_order()) {
+      q.ext_oneapi_submit_barrier(std::vector<sycl::event>{local_scans});
+    }
 
     if (n_wgroups > 1) {
       scan_internal(q, functor_wrapper, group_results, n_wgroups);
@@ -185,8 +187,10 @@ class ParallelScanSYCLBase {
                                    &group_results[item.get_group_linear_id()]);
             });
       });
-      q.ext_oneapi_submit_barrier(
-          std::vector<sycl::event>{update_with_group_results});
+      if (!q.is_in_order()) {
+        q.ext_oneapi_submit_barrier(
+            std::vector<sycl::event>{update_with_group_results});
+      }
     }
   }
 
@@ -220,8 +224,10 @@ class ParallelScanSYCLBase {
         global_mem[id] = update;
       });
     });
-    q.ext_oneapi_submit_barrier(
-        std::vector<sycl::event>{initialize_global_memory});
+    if (!q.is_in_order()) {
+      q.ext_oneapi_submit_barrier(
+          std::vector<sycl::event>{initialize_global_memory});
+    }
 
     // Perform the actual exclusive scan
     scan_internal(q, functor_wrapper, m_scratch_space, len);
@@ -246,8 +252,10 @@ class ParallelScanSYCLBase {
           *result_ptr = update;
       });
     });
-    q.ext_oneapi_submit_barrier(
-        std::vector<sycl::event>{update_global_results});
+    if (!q.is_in_order()) {
+      q.ext_oneapi_submit_barrier(
+          std::vector<sycl::event>{update_global_results});
+    }
     return update_global_results;
   }
 
diff --git a/core/src/SYCL/Kokkos_SYCL_Parallel_Team.hpp b/core/src/SYCL/Kokkos_SYCL_Parallel_Team.hpp
index 601580b2d..d169f9b13 100644
--- a/core/src/SYCL/Kokkos_SYCL_Parallel_Team.hpp
+++ b/core/src/SYCL/Kokkos_SYCL_Parallel_Team.hpp
@@ -446,7 +446,9 @@ class ParallelFor<FunctorType, Kokkos::TeamPolicy<Properties...>,
               sycl::range<2>(m_team_size, final_vector_size)),
           lambda);
     });
-    q.ext_oneapi_submit_barrier(std::vector<sycl::event>{parallel_for_event});
+    if (!q.is_in_order()) {
+      q.ext_oneapi_submit_barrier(std::vector<sycl::event>{parallel_for_event});
+    }
     return parallel_for_event;
   }
 
@@ -631,8 +633,10 @@ class ParallelReduce<FunctorType, Kokkos::TeamPolicy<Properties...>,
                                    &results_ptr[0]);
             });
       });
-      q.ext_oneapi_submit_barrier(
-          std::vector<sycl::event>{parallel_reduce_event});
+      if (!q.is_in_order()) {
+        q.ext_oneapi_submit_barrier(
+            std::vector<sycl::event>{parallel_reduce_event});
+      }
       last_reduction_event = parallel_reduce_event;
     } else {
       // Otherwise, (if the total range has more than one element) we perform a
@@ -825,8 +829,10 @@ class ParallelReduce<FunctorType, Kokkos::TeamPolicy<Properties...>,
                 sycl::range<2>(m_team_size, m_vector_size)),
             reduction_lambda);
       });
-      last_reduction_event       = q.ext_oneapi_submit_barrier(
-          std::vector<sycl::event>{parallel_reduce_event});
+      if (!q.is_in_order()) {
+        last_reduction_event       = q.ext_oneapi_submit_barrier(
+            std::vector<sycl::event>{parallel_reduce_event});
+      }
     }
 
     // At this point, the reduced value is written to the entry in results_ptr
diff --git a/core/src/SYCL/Kokkos_SYCL_Space.cpp b/core/src/SYCL/Kokkos_SYCL_Space.cpp
index 6151b3eaa..05a7025f8 100644
--- a/core/src/SYCL/Kokkos_SYCL_Space.cpp
+++ b/core/src/SYCL/Kokkos_SYCL_Space.cpp
@@ -43,9 +43,13 @@ void DeepCopyAsyncSYCL(const Kokkos::Experimental::SYCL& instance, void* dst,
   // to actually fence the execution space to make sure the memcpy is properly
   // enqueued when using out-of-order queues.
   sycl::queue& q = *instance.impl_internal_space_instance()->m_queue;
-  q.wait_and_throw();
+  if (!q.is_in_order()) {
+    q.wait_and_throw();
+  }
   auto event = q.memcpy(dst, src, n);
-  q.ext_oneapi_submit_barrier(std::vector<sycl::event>{event});
+  if (!q.is_in_order()) {
+    q.ext_oneapi_submit_barrier(std::vector<sycl::event>{event});
+  }
 }
 
 void DeepCopyAsyncSYCL(void* dst, const void* src, size_t n) {
